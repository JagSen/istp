#How we built iSTP
= Introduction =

iSTP was used to learn how to write scalable applications.  This page records for the future how we got from nowhere to somewhere!


= Details =

Having installed Apache, MySQL, Ruby, Rail we were ready to begin building the application.

Build the project skeleton by issuing the command `rails iSTP`

Now we have the skeleton its time to give it a heartbeat so we started the Ruby server by going to the newly created iSTP folder that just got created and issued the command `ruby script/server`

Simple! We were on our way :)  To prove it worked and Ruby on Rails was playing nice we pointed our browser at [http://localhost:3000 http://localhost:3000] to do the 'hello world' type test.

Now we could kick off a little coding.  As we want to keep the server running we had to open up another command window; we went to the script sub-folder inside our nice new iSTP folder and issued the command `ruby generate controller istp`

We had to add 3 lines of code to one of the files this generated in order to do the real hello world test.... editing \istp\app\controllers\istp_controller.rb and adding 
{{{
def index
  render :text => "Hello World"
end 
}}}
Now pointing our browser to [http://localhost:3000/istp http://localhost:3000/istp] produce the desired simple output :)

Re edit \istp\app\controllers\istp_controller.rb and reomve the render line as we know everything is working just fine.

Next came a simple template test.  We created a file called `index.rhtml` under the already created folder of `\istp\app\views\istp\` which contained nothing accept the desired `\istp` response.

Having done this and seen it working, we no longer need the other 2 lines we created in the `istp_controller.rb ` file!

Next we set up the link to the MySql database. This turned outto be the mot typing we had to do in the early stages!  This is because the default install provides a template for SQLite rather than MySql. So we edited the exisiting `\istp\config\database.yml` file by trashing what was there and d eplacing it with 
{{{
# MySql version 5.x
#   gem install sqlite3-ruby (not necessary on OS X Leopard)
development:
  adapter: mysql
  database: istp_dev
  host: localhost
  username: root
  password:

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  adapter: mysql
  database: istp_test
  host: localhost
  username: root
  password:

production:
  adapter: mysql
  database: istp_prod
  host: localhost
  username: root
  password:
}}}

Having told the application how to get to the database we thought we best create it so using a MySql manipulation tool we entered `CREATE DATABASE ```istp_dev``` ;`

The books tell you take it easy at this stage and create one table and a couple of fields; we talk half their advice with a single table, but then through it out the window and created 10 fields!

{{{
 CREATE TABLE `istp_dev`.`trade` (
`trade_id` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY ,
`trade_date` DATE NOT NULL ,
`counterparty_id` MEDIUMINT NOT NULL ,
`buy_sell_ind` VARCHAR( 1 ) NOT NULL ,
`nominal_qty` DECIMAL( 7 ) NOT NULL ,
`instrument_id` MEDIUMINT NOT NULL ,
`price` DECIMAL(10,6) NOT NULL ,
`value_date` DATE NOT NULL ,
`entry_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ,
`entry_user_id` MEDIUMINT NOT NULL
) ENGINE = MYISAM ;
}}}

At this stage Ruby/Rails knows knothing of the database structure so we send it on a fact finding mission by saying `ruby generate model trade` which resulted in a few more files being automatically created - so little work and so many files already :)

Restart the server process on cmd session 1.

Now we are are in a position to use the next RAD part of Ruby/Rails called SCAFFOLD.  This will build for us a VERY quick trade insert form for proof on concpet.
To do this edit the file `\istp\app\controllers\istp_controller.rb` again, this time adding the command `scaffold :post`

Wanting to see the New Post functionality appear in our web browser, off we went to try it out.

Hmmm, *BANG* she blew :(  What was wrong? Doh, the workmen hadn't delivered the scaffolding so we weren't in a position to use it! Back in our second cmd prompt we issued a call to go and get the necessary goods `ruby plugin install scaffolding` and restarted the server again.

Ready for a big smile on our faces we were again disappointed to see `undefined method ```paginate'` error when refreshing our browser.  This wasn't at all expected - no mention of it in the tutorials observed that gave us the idea to try this programming route in the first place :(

After a little Googling it turns out that being on the bleeding edge had claimed aother victim. [http://groups.google.com/group/beginning-rails/browse_thread/thread/c6f0a57966669e90 This] gave us the answer and resulted in us issuing the command `ruby plugin install svn://errtheblog.com/svn/plugins/classic_pagination` .... only to be told it was already installed :(

Some more Googling got us to [http://www.nabble.com/installing-pagination-problem--td14702572.html this] little beauty.... aaaagggghhhh, seems everything that was in the old memory banks from the online tutorials was slowly becoming worthless :(  Time for a beer and another day...

===Day2===
Decided to check out the logs file. Yikes!
{{{
WARNING: You're using the Ruby-based MySQL library that ships with Rails. This library is not suited for production. Please install the C-based MySQL library instead (gem install mysql).
  [4;36;1mSQL (0.043000)[0m   [0;1mSET SQL_AUTO_IS_NULL=0[0m

}}}
Wow an error (well a warning actually) that tells us how to fix it, cool :)
{{{
gem install mysql
}}}
and the issue was never logged again, hoorah.

Next, having been clobbered so many times so early on living on the bleeding edge, we took time out to [http://fairleads.blogspot.com/2007/12/rails-20-and-scaffolding-step-by-step.html read up] on the changes from v1.n to v2.n in attempt to avoid further frustration.

As a result of this, we decided to start again (!) as we had done so little and wanted to make sure we understood what we had taken on board... so ggodby applicatin folder and databse, nice knowing you....not.


=Idiots guide to building an application with Ruby/Rails, aka avoding the pitfalls of out of date tutorials and negating the need for much Googling!=
Create an application framework by issuing the command
{{{
rails name_of_application
}}}
Get ready to do some work
{{{
cd name_of_application
}}}
Get you dev/tes/prod databases ready by editing the `\name_of_application\config\database.yml` file and then issuing the command
{{{
rake db:create:all
}}}
Fire up the inbuilt weberserver by commanding
{{{
ruby script/server
}}}
and point your browser at `http://localhost:3000` to see it working.

Hey pesto, so far so good.